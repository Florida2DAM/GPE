{"version":3,"sources":["components/GPEConst.js","components/GPEInput.js","screens/LotsView.js","screens/ArticlesView.js","screens/ReportsView.js","components/GPEButton.js","screens/ClientsView.js","screens/EmployeesView.js","screens/OrdersView.js","App.js","reportWebVitals.js","index.js"],"names":["GPEApi","axios","require","moment","GPEInput","className","value","this","props","getValue","onChange","e","placeholder","getPlaceholder","React","LotsView","getLots","get","then","response","setState","allLots","data","lots","getArticleIds","articleIds","forEach","push","ArticleId","allArticleId","console","log","updateLot","lot","state","articleId","LotId","lotId","stock","put","visibleHandler","clearInputs","checkIputs","addLots","post","activeIndex","alert","lotIdHandler","target","stockHandler","articleIdHandler","filterHandler","filter","lotList","element","filterText","toUpperCase","includes","changePage","rowData","label","icon","onClick","showInputs","style","backgroundColor","visible","Stock","GPEAlert","createRef","date","ref","onTabChange","index","header","textAlign","width","field","body","options","disabled","color","ArticlesView","getArticles","articles","allArticles","updateArticle","article","Description","description","Price","price","Brand","brand","Category","category","Iva","iva","addArticle","Enabled","descriptionHandler","priceHandler","brandHandler","categoryHandler","ivaHandler","articleList","showEnable","show","showDisable","visibleModify","btnActive","changeArticle","enabled","ReportsView","getOrdersDate","newDates","item","format","ordersDate","getOrdersCount","ordersCount","getClientsDate","clientsDate","getClientsCount","clientsCount","ordersData","labels","datasets","fill","borderColor","clientsData","chartOptions","legend","fontColor","scales","xAxes","ticks","yAxes","type","GPEButton","getLabel","getIcon","getClassName","ClientsView","getClients","RegisterDate","clients","email","handlerEmail","name","surname","marginLeft","resetStates","variant","GPEButtonFilter","marginRight","GetLabel","deleteUsers","oldPwd","handlerOldPwd","changePassword","EmployeesView","nameHandler","typeHandler","enabledHandler","changeEmployee","changeEmployee2","addEmployee","employee","Name","Type","getEmployees","employees","allEmployees","EmployeeId","updateEmployee","emp","employeeId","employeeList","types","enabledOptions","OrdersView","getOrders","Date","DeriveryDate","Delivered","Paid","orders","local","handlerLocal","visitant","handlerVisitant","handlerDate","eventId","filterButton","App","to","activeClassName","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39573135.chunk.js","sourcesContent":["export const GPEApi = 'http://54.160.33.104:80/api/';\r\nexport const axios = require('axios');\r\nexport const moment = require('moment');\r\n","import * as React from 'react';\r\nimport { Fragment } from 'react';\r\nimport '../App.css';\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\nexport class GPEInput extends React.Component {\r\n    render() {\r\n        return (\r\n\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText value={this.props.getValue} onChange={(e) => this.props.onChange(e)}\r\n                    placeholder={this.props.getPlaceholder} placeholder=\"Search\" />\r\n            </span>\r\n\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport {createRef, Fragment} from 'react';\r\nimport '../App.css';\r\nimport {DataTable} from 'primereact/datatable';\r\nimport {Column} from 'primereact/column';\r\nimport {InputText} from 'primereact/inputtext';\r\nimport {Button} from 'primereact/button';\r\nimport {TabPanel, TabView} from 'primereact/tabview';\r\nimport {Toast} from 'primereact/toast';\r\nimport {axios, GPEApi} from '../components/GPEConst'\r\nimport {GPEInput} from '../components/GPEInput';\r\nimport {Dropdown} from 'primereact/dropdown';\r\n\r\nexport class LotsView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.GPEAlert = createRef();\r\n        this.state = {\r\n            lots: [],\r\n            allLots: [],\r\n            date: '',\r\n            filter: '',\r\n            lotId: '',\r\n            articleId: '',\r\n            allArticleId: [],\r\n            stock: 0,\r\n            visible: true,\r\n            activeIndex: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLots();\r\n    }\r\n\r\n    getLots = () => {\r\n        axios.get(GPEApi + 'Lots').then((response) => {\r\n            this.setState({allLots: response.data});\r\n            this.setState({lots: response.data});\r\n        })\r\n        this.getArticleIds();\r\n    }\r\n    getArticleIds = () => {\r\n        axios.get(GPEApi + 'Articles/BackOffice').then((response) => {\r\n            let articleIds = [];\r\n            response.data.forEach(e => {\r\n                articleIds.push(e.ArticleId)\r\n            })\r\n            this.setState({allArticleId: articleIds});\r\n            console.log(articleIds)\r\n        })\r\n    }\r\n    updateLot = () => {\r\n        let lot = {\r\n            ArticleId: this.state.articleId,\r\n            LotId: this.state.lotId,\r\n            stock: this.state.stock\r\n        }\r\n        axios.put(GPEApi + 'Lots', lot).then(response => {\r\n                this.visibleHandler();\r\n                this.getLots();\r\n                this.clearInputs();\r\n            }\r\n        )\r\n\r\n    }\r\n    checkIputs = () => {\r\n        if (this.state.stock == '' || this.state.articleId == '' || this.state.lotId == '') {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    addLots = () => {\r\n        if (this.checkIputs()) {\r\n            let lot = {\r\n                ArticleId: this.state.articleId,\r\n                LotId: this.state.lotId,\r\n                stock: this.state.stock\r\n            }\r\n            axios.post(GPEApi + 'Lots', lot).then(response => {\r\n                    this.getLots();\r\n                    this.clearInputs();\r\n                    this.setState({activeIndex: 0});\r\n                }\r\n            )\r\n        } else {\r\n            alert(\"You have to introduce all fields\")\r\n        }\r\n\r\n    }\r\n\r\n    lotIdHandler = (e) => {\r\n        this.setState({lotId: e.target.value});\r\n    };\r\n    stockHandler = (e) => {\r\n        this.setState({stock: e.target.value});\r\n    };\r\n    articleIdHandler = (e) => {\r\n        this.setState({articleId: e.target.value}, console.log(e.target.value));\r\n    }\r\n    filterHandler = (e) => {\r\n        this.setState({filter: e.target.value}, () => {\r\n            this.filter();\r\n            console.log(this.state.filter);\r\n        });\r\n    };\r\n\r\n    filter = () => {\r\n\r\n        let lotList = [];\r\n        if (this.state.filter === '') {\r\n            this.setState({lots: this.state.allLots});\r\n        } else {\r\n            this.state.allLots.forEach(element => {\r\n                const filterText = this.state.filter.toUpperCase();\r\n                if (element.ArticleId == (filterText)\r\n                    || element.LotId.toUpperCase().includes(filterText)) {\r\n                    lotList.push(element);\r\n                }\r\n            });\r\n            this.setState({lots: lotList});\r\n        }\r\n    };\r\n\r\n    changePage = (rowData) => {\r\n        return <Button label='Modify' icon='pi pi-pencil' onClick={() => this.showInputs(rowData)}\r\n                       className='p-button-secondary p-mr-2'\r\n                       style={{backgroundColor: '#86AEC2'}}/>\r\n    }\r\n\r\n    visibleHandler = () => {\r\n        this.setState({visible: !this.state.visible});\r\n    }\r\n\r\n    showInputs = (rowData) => {\r\n        this.visibleHandler();\r\n        console.log(rowData)\r\n        this.setState({lotId: rowData.LotId});\r\n        this.setState({stock: rowData.Stock}, () => console.log(this.state.stock));\r\n        this.setState({articleId: rowData.ArticleId});\r\n    }\r\n    clearInputs = () => {\r\n        this.setState({lotId: ''});\r\n        this.setState({stock: ''});\r\n        this.setState({articleId: ''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Toast ref={this.GPEAlert}/>\r\n                <TabView activeIndex={this.state.activeIndex}\r\n                         onTabChange={(e) => this.setState({activeIndex: e.index})}>\r\n                    <TabPanel header='Lots'>\r\n                        {this.state.visible === true ? <div>\r\n                                <div className='flexCenter'>\r\n                                    <GPEInput onChange={this.filterHandler}/>\r\n                                    <Button label='Actualizar' icon='pi pi-refresh' onClick={this.getLots}\r\n                                            className='p-button-secondary p-mr-2'\r\n                                            style={{backgroundColor: '#86AEC2'}}/>\r\n                                </div>\r\n                                <div>\r\n                                    <DataTable value={this.state.lots}>\r\n                                        <Column style={{textAlign: 'center', width: '12%'}} field='ArticleId'\r\n                                                header='ArticleId'/>\r\n                                        <Column style={{textAlign: 'center', width: '9%'}} field='LotId' header='LotId'/>\r\n                                        <Column style={{textAlign: 'center', width: '11%'}} field='Stock' header='Stock'/>\r\n                                        <Column style={{textAlign: 'center', width: '11%'}} body={this.changePage}\r\n                                                field=\"Modify\" header=\"Modify\"></Column>\r\n                                    </DataTable>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <Dropdown value={this.state.articleId} options={this.state.allArticleId}\r\n                                          onChange={this.articleIdHandler} disabled placeholder=\"Select a Id\"/>\r\n                                <InputText value={this.state.lotId} disabled onChange={this.lotIdHandler}\r\n                                           placeholder='Lot Id' style={{width: '220px'}}/>\r\n                                <InputText value={this.state.stock} onChange={this.stockHandler}\r\n                                           placeholder='Stock Number' style={{width: '220px'}}/>\r\n                                <Button label='Modify' icon='pi pi-send' onClick={this.updateLot}\r\n                                        className='p-button-secondary p-mr-2'\r\n                                        style={{backgroundColor: '#77FF94', color: 'black'}}/>\r\n                            </div>}\r\n                    </TabPanel>\r\n                    <TabPanel header='New Lot'>\r\n                        <div className='flexCenter'>\r\n                            <div>\r\n                                <Dropdown value={this.state.articleId} options={this.state.allArticleId}\r\n                                          onChange={this.articleIdHandler} placeholder=\"Select a Id\"\r\n                                          className={this.state.articleId == '' && \"p-invalid p-d-block\"}/>\r\n                                <InputText value={this.state.lotId} onChange={this.lotIdHandler}\r\n                                           placeholder='Lot Id' style={{width: '220px'}}\r\n                                           className={this.state.lotId == '' && \"p-invalid p-d-block\"}/>\r\n                                <InputText value={this.state.stock} onChange={this.stockHandler}\r\n                                           placeholder='Stock Number' style={{width: '220px'}}\r\n                                           className={this.state.stock == '' && \"p-invalid p-d-block\"}/>\r\n                            </div>\r\n                            <div className='flexCenter'>\r\n                                <Button label=' New Lot' icon='pi pi-plus-circle' onClick={this.addLots}\r\n                                        className='p-button-secondary p-mr-2'\r\n                                        style={{backgroundColor: '#77FF94', color: 'black'}}/>\r\n                            </div>\r\n                        </div>\r\n                    </TabPanel>\r\n                </TabView>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {createRef, Fragment} from 'react';\r\nimport '../App.css';\r\nimport {DataTable} from 'primereact/datatable';\r\nimport {Column} from 'primereact/column';\r\nimport {InputText} from 'primereact/inputtext';\r\nimport {Button} from 'primereact/button';\r\nimport {TabPanel, TabView} from 'primereact/tabview';\r\nimport {Toast} from 'primereact/toast';\r\nimport {GPEInput} from '../components/GPEInput';\r\nimport {axios, GPEApi} from '../components/GPEConst'\r\n\r\nexport class ArticlesView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.GPEAlert = createRef();\r\n        this.state = {\r\n            articles: [],\r\n            allArticles: [],\r\n            articleId: '',\r\n            description: '',\r\n            price: '',\r\n            brand: '',\r\n            category: '',\r\n            iva: '',\r\n            activeIndex: 0,\r\n            enabled: false,\r\n            visible: true,\r\n            show: true,\r\n            visibleModify: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getArticles();\r\n    }\r\n\r\n    getArticles = () => {\r\n        axios.get(GPEApi + 'Articles/BackOffice').then((response) => {\r\n            this.setState({articles: response.data});\r\n            this.setState({allArticles: response.data});\r\n        })\r\n    }\r\n\r\n    updateArticle = () => {\r\n        let article = {\r\n            ArticleId: this.state.articleId,\r\n            Description: this.state.description,\r\n            Price: this.state.price,\r\n            Brand: this.state.brand,\r\n            Category: this.state.category,\r\n            Iva: this.state.iva,\r\n\r\n        }\r\n        axios.put(GPEApi + 'Articles', article).then(response => {\r\n                this.visibleHandler();\r\n                this.getArticles();\r\n                this.clearInputs();\r\n            }\r\n        )\r\n    }\r\n\r\n    checkIputs = () => {\r\n        if (this.state.description == '' || this.state.price == '' ||\r\n            this.state.brand == '' || this.state.category == '' || this.state.iva == '') {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    addArticle = () => {\r\n        if (this.checkIputs()) {\r\n            let article = {\r\n                ArticleId: this.state.articleId,\r\n                Description: this.state.description,\r\n                Price: this.state.price,\r\n                Brand: this.state.brand,\r\n                Category: this.state.category,\r\n                Iva: this.state.iva,\r\n                Enabled: false,\r\n            }\r\n            axios.post(GPEApi + 'Articles', article).then(response => {\r\n                    this.getArticles();\r\n                    this.clearInputs();\r\n                    this.setState({activeIndex: 0});\r\n                }\r\n            )\r\n        } else {\r\n            alert(\"You have to introduce all fields\")\r\n        }\r\n    }\r\n\r\n\r\n    articleIdHandler = (e) => {\r\n        this.setState({articleId: e.target.value});\r\n    }\r\n    descriptionHandler = (e) => {\r\n        this.setState({description: e.target.value});\r\n    };\r\n    priceHandler = (e) => {\r\n        this.setState({price: e.target.value});\r\n    };\r\n    brandHandler = (e) => {\r\n        this.setState({brand: e.target.value});\r\n    };\r\n    categoryHandler = (e) => {\r\n        this.setState({category: e.target.value});\r\n    };\r\n    ivaHandler = (e) => {\r\n        this.setState({iva: e.target.value});\r\n    };\r\n    filterHandler = (e) => {\r\n        this.setState({filter: e.target.value}, () => {\r\n            this.filter();\r\n        });\r\n    };\r\n\r\n    filter = () => {\r\n\r\n        let articleList = [];\r\n        if (this.state.filter === '') {\r\n            this.setState({articles: this.state.allArticles});\r\n        } else {\r\n            this.state.allArticles.forEach(element => {\r\n                const filterText = this.state.filter.toUpperCase();\r\n                if (element.ArticleId == (filterText) ||\r\n                    element.Description.toUpperCase().includes(filterText) ||\r\n                    element.Brand.toUpperCase().includes(filterText) ||\r\n                    element.Category.toUpperCase().includes(filterText) ||\r\n                    element.Price == (filterText) ||\r\n                    element.Iva == (filterText)\r\n                ) {\r\n                    articleList.push(element);\r\n                }\r\n            });\r\n            this.setState({articles: articleList});\r\n        }\r\n    };\r\n\r\n\r\n    showEnable = () => {\r\n\r\n        let articleList = [];\r\n        this.state.allArticles.forEach(element => {\r\n            if (element.Enabled == true) {\r\n                articleList.push(element);\r\n            }\r\n        });\r\n        this.setState({articles: articleList}, () => {\r\n            this.setState({show: !this.state.show})\r\n        });\r\n\r\n    };\r\n\r\n    showDisable = () => {\r\n        let articleList = [];\r\n        this.state.allArticles.forEach(element => {\r\n            if (element.Enabled == false) {\r\n                articleList.push(element);\r\n            }\r\n        });\r\n        this.setState({articles: articleList}, () => {\r\n            this.setState({show: !this.state.show})\r\n        });\r\n\r\n    };\r\n\r\n    changePage = (rowData) => {\r\n        return <Button label='Modify' icon='pi pi-pencil' onClick={() => this.showInputs(rowData)}\r\n                       className='p-button-secondary p-mr-2'\r\n                       style={{backgroundColor: '#86AEC2'}}/>\r\n    }\r\n\r\n    visibleHandler = () => {\r\n        this.setState({visibleModify: !this.state.visibleModify});\r\n    }\r\n\r\n    showInputs = (rowData) => {\r\n        this.visibleHandler();\r\n        console.log(rowData)\r\n        this.setState({articleId: rowData.ArticleId});\r\n        this.setState({description: rowData.Description});\r\n        this.setState({price: rowData.Price});\r\n        this.setState({brand: rowData.Brand});\r\n        this.setState({category: rowData.Category});\r\n        this.setState({iva: rowData.Iva});\r\n    }\r\n    clearInputs = () => {\r\n        this.setState({articleId: ''});\r\n        this.setState({description: ''});\r\n        this.setState({price: ''});\r\n        this.setState({brand: ''});\r\n        this.setState({category: ''});\r\n        this.setState({iva: ''});\r\n    }\r\n\r\n    btnActive = (rowData) => {\r\n        return (<>{rowData.Enabled ?\r\n            <Button label='YES' onClick={() => this.changeArticle(rowData)} className='p-button-success'/>\r\n            :\r\n            <Button label='NO' onClick={() => this.changeArticle(rowData)} className=' p-button-danger'/>\r\n        }\r\n        </>)\r\n    }\r\n    changeArticle = (articles) => {\r\n        axios.put(GPEApi + 'Articles/' + articles.ArticleId).then(() => this.getArticles())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Toast ref={this.GPEAlert}/>\r\n                <TabView activeIndex={this.state.activeIndex}\r\n                         onTabChange={(e) => this.setState({activeIndex: e.index})}>\r\n                    <TabPanel header='Articles'>\r\n                        {this.state.visibleModify ?\r\n                            <div>\r\n                                <InputText value={this.state.articleId} disabled onChange={this.articleIdHandler}\r\n                                           placeholder='Articulo ID' style={{width: '100px'}}/>\r\n                                <InputText value={this.state.description} onChange={this.descriptionHandler}\r\n                                           placeholder='Description' style={{width: '200px'}}/>\r\n                                <InputText value={this.state.price} onChange={this.priceHandler}\r\n                                           placeholder='Price' style={{width: '200px'}}/>\r\n                                <InputText value={this.state.brand} onChange={this.brandHandler}\r\n                                           placeholder='Brand' style={{width: '200px'}}/>\r\n                                <InputText value={this.state.category} onChange={this.categoryHandler}\r\n                                           placeholder='Category' style={{width: '200px'}}/>\r\n                                <InputText value={this.state.iva} onChange={this.ivaHandler}\r\n                                           placeholder='Iva' style={{width: '200px'}}/>\r\n                                <Button label='Modify' icon='pi pi-send' onClick={this.updateArticle}\r\n                                        className='p-button-secondary p-mr-2'\r\n                                        style={{backgroundColor: '#77FF94', color: 'black'}}/>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <div className='flexCenter'>\r\n                                    <GPEInput onChange={this.filterHandler}/>\r\n                                    {this.state.show ? <Button label='Show Enable' onClick={this.showEnable}\r\n                                                               className='p-button-secondary p-mr-2' icon='pi pi-eye'\r\n                                                               style={{backgroundColor: '#86AEC2'}}/> :\r\n                                        <Button label='Show Disable' onClick={this.showDisable}\r\n                                                className='p-button-secondary p-mr-2' icon='pi pi-eye'\r\n                                                style={{backgroundColor: '#86AEC2'}}/>\r\n                                    }\r\n                                    <Button label='Actualizar' icon='pi pi-refresh' onClick={this.getArticles}\r\n                                            className='p-button-secondary p-mr-2'\r\n                                            style={{backgroundColor: '#86AEC2'}}/>\r\n                                </div>\r\n                                <div>\r\n                                    <DataTable value={this.state.articles}>\r\n                                        <Column style={{textAlign: 'center', width: '15%'}} field='ArticleId'\r\n                                                header='ArticleId'/>\r\n                                        <Column style={{textAlign: 'center', width: '25%'}} field='Description'\r\n                                                header='Description'/>\r\n                                        <Column style={{textAlign: 'center', width: '15%'}} field='Price'\r\n                                                header='Price'/>\r\n                                        <Column style={{textAlign: 'center', width: '25%'}} field='Brand'\r\n                                                header='Brand'/>\r\n                                        <Column style={{textAlign: 'center', width: '25%'}} field='Category'\r\n                                                header='Category'/>\r\n                                        <Column style={{textAlign: 'center', width: '10%'}} field='Iva'\r\n                                                header='Iva'/>\r\n                                        <Column body={this.btnActive} style={{textAlign: 'center', width: '10%'}}\r\n                                                field='Enabled'\r\n                                                header='Enabled'/>\r\n                                        <Column style={{textAlign: 'center', width: '25%'}} body={this.changePage}\r\n                                                field=\"Modify\" header=\"Modify\"/>\r\n                                    </DataTable>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </TabPanel>\r\n                    <TabPanel header='New Articles'>\r\n                        <InputText value={this.state.description} onChange={this.descriptionHandler}\r\n                                   placeholder='Description' style={{width: '200px'}}/>\r\n                        <InputText value={this.state.price} onChange={this.priceHandler}\r\n                                   placeholder='Price' style={{width: '200px'}}/>\r\n                        <InputText value={this.state.brand} onChange={this.brandHandler}\r\n                                   placeholder='Brand' style={{width: '200px'}}/>\r\n                        <InputText value={this.state.category} onChange={this.categoryHandler}\r\n                                   placeholder='Category' style={{width: '200px'}}/>\r\n                        <InputText value={this.state.iva} onChange={this.ivaHandler}\r\n                                   placeholder='Iva' style={{width: '200px'}}/>\r\n                        <Button label=' New Lot' icon='pi pi-plus-circle' onClick={this.addArticle}\r\n                                className='p-button-secondary p-mr-2'\r\n                                style={{backgroundColor: '#77FF94', color: 'black'}}/>\r\n                    </TabPanel>\r\n                </TabView>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {Fragment} from 'react';\r\nimport '../App.css';\r\nimport {TabPanel, TabView} from 'primereact/tabview';\r\nimport {Chart} from 'primereact/chart';\r\nimport {axios, GPEApi, moment} from '../components/GPEConst'\r\n\r\nexport class ReportsView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersDate: [],\r\n            ordersCount: [],\r\n            clientsDate: [],\r\n            clientsCount: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getOrdersDate();\r\n        this.getOrdersCount();\r\n        this.getClientsDate();\r\n        this.getClientsCount();\r\n    }\r\n\r\n    // Here we create all our promises to charge the states and show after that the charts\r\n    // when we recibe dates we use moment js to set the spanish format\r\n    getOrdersDate = () => {\r\n        let newDates = [];\r\n        axios.get(GPEApi + 'Orders/GetDates').then((response) => {\r\n            response.data.forEach(item => newDates.push(moment(item).format('DD-MM-YYYY')) );\r\n            this.setState({ordersDate: newDates});\r\n        })\r\n    }\r\n    getOrdersCount = () => {\r\n        axios.get(GPEApi + 'Orders/GetRegisters').then((response) => {\r\n            this.setState({ordersCount: response.data});\r\n        })\r\n    }\r\n    getClientsDate = () => {\r\n        let newDates = [];\r\n        axios.get(GPEApi+'Clients/GetDates').then((response) => {\r\n            response.data.forEach(item => newDates.push(moment(item).format('DD-MM-YYYY')) );\r\n            this.setState({clientsDate: newDates});\r\n        })\r\n    }\r\n    getClientsCount = () => {\r\n        axios.get(GPEApi+'Clients/GetRegisters').then((response) => {\r\n            this.setState({clientsCount: response.data});\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const ordersData = {\r\n            labels: this.state.ordersDate,\r\n            datasets: [\r\n                {\r\n                    label: 'Orders',\r\n                    data: this.state.ordersCount,\r\n                    fill: false,\r\n                    borderColor: '#ffcc57',\r\n                    backgroundColor: '#393e46',\r\n                }\r\n            ]\r\n        };\r\n        const clientsData = {\r\n            labels: this.state.clientsDate,\r\n            datasets: [\r\n                {\r\n                    label: 'Clients',\r\n                    data: this.state.clientsCount,\r\n                    fill: false,\r\n                    borderColor: '#ffcc57',\r\n                    backgroundColor: '#393e46'\r\n                }\r\n            ]\r\n        };\r\n        const chartOptions = {\r\n            legend: {\r\n                labels: {\r\n                    fontColor: '#ffcc57'\r\n                }\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    ticks: {\r\n                        fontColor: '#ffcc57'\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    ticks: {\r\n                        fontColor: '#ffcc57'\r\n                    }\r\n                }]\r\n            }\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <TabView>\r\n                    <TabPanel header='Orders'>\r\n                        <div className='chartView'>\r\n                            <Chart className='chart' type='line' data={ordersData} options={chartOptions}\r\n                                   width='1000%'/>\r\n                        </div>\r\n                    </TabPanel>\r\n                    <TabPanel header='Clients'>\r\n                        <div className='chartView'>\r\n                            <Chart className='chart' type='line' data={clientsData} options={chartOptions}\r\n                                   width='1000%'/>\r\n                        </div>\r\n                    </TabPanel>\r\n                </TabView>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Fragment} from 'react';\r\nimport '../App.css';\r\nimport {Button} from 'primereact/button';\r\n\r\nexport  class GPEButton extends  React.Component{\r\n    render() {\r\n        return(\r\n            <Fragment>\r\n                <Button label={this.props.getLabel} icon={this.props.getIcon} className={this.props.getClassName} />\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import * as React from 'react';\r\nimport {Fragment} from 'react';\r\nimport '../App.css';\r\nimport {DataTable} from 'primereact/datatable';\r\nimport {Column} from 'primereact/column';\r\nimport {InputText} from 'primereact/inputtext';\r\nimport {GPEButton} from '../components/GPEButton';\r\nimport {TabPanel, TabView} from 'primereact/tabview';\r\nimport {Toast} from 'primereact/toast';\r\nimport {createRef} from 'react';\r\nimport {axios, GPEApi} from '../components/GPEConst'\r\nconst moment = require('moment');\r\n\r\n\r\nexport class ClientsView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.GPEAlert = createRef();\r\n        this.state = {\r\n            clients: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getClients();\r\n    }\r\n\r\n    getClients = () => {\r\n        axios.get(GPEApi+'Clients').then((response) => {\r\n            response.data.forEach(item => {\r\n                item.RegisterDate = moment(item.RegisterDate).format('YYYY-MM-DD');\r\n                if (item.Enabled === true) {\r\n                    item.Enabled = 'Yes';\r\n                } else {\r\n                    item.Enabled = 'No';\r\n                }\r\n            });\r\n            this.setState({clients: response.data});\r\n        })\r\n    }\r\n    // filterMail = () => {\r\n    //     axios.get(GPEApi+'Usuarios/GetEmail?EmailId=' + this.state.email).then((response) => {\r\n    //         response.data.forEach(item => {\r\n    //             item.FechaAlta = moment(item.FechaAlta).format('YYYY-MM-DD');\r\n    //         });\r\n    //         this.setState({clients: response.data});\r\n    //         this.showSuccessToast();\r\n    //     })\r\n    // }\r\n    // filterName = () => {\r\n    //     axios.get(GPEApi+'Usuarios/GetNombre?Nombre=' + this.state.name).then((response) => {\r\n    //         response.data.forEach(item => {\r\n    //             item.FechaAlta = moment(item.FechaAlta).format('YYYY-MM-DD');\r\n    //         });\r\n    //         this.setState({clients: response.data});\r\n    //         this.showSuccessToast();\r\n    //     })\r\n    // }\r\n    // filterSurname = () => {\r\n    //     axios.get(GPEApi+'Usuarios/GetApellidos?Apellidos=' + this.state.surname).then((response) => {\r\n    //         response.data.forEach(item => {\r\n    //             item.FechaAlta = moment(item.FechaAlta).format('YYYY-MM-DD');\r\n    //         });\r\n    //         this.setState({clients: response.data});\r\n    //         this.showSuccessToast();\r\n    //     })\r\n    // }\r\n    // deleteUsers = () => {\r\n    //     if(this.state.email){\r\n    //         axios.delete(GPEApi+'Usuarios?EmailId=' + this.state.email).then((response) => {\r\n    //             this.showInfoSuccessToast('Usuario ' + this.state.email + ' eliminado.')\r\n    //         })\r\n    //             .then(this.resetStates)\r\n    //             .catch(error => {\r\n    //                 this.showErrorToast(error.message.toString() + '\\nCompruebe la conexión y que ha introducido correctamente los campos.');\r\n    //             });\r\n    //     }\r\n    //     else{\r\n    //         this.showErrorToast('Compruebe la conexión y que ha introducido correctamente los campos.');\r\n    //     }\r\n    // }\r\n    // changePassword = () => {\r\n    //     let pwd = {\r\n    //         OldPassword: this.state.oldPwd,\r\n    //         NewPassword: this.state.newPwd,\r\n    //         ConfirmPassword: this.state.confirmPwd\r\n    //     };\r\n    //     axios.post(GPEApi+'Account/NewPassword?Email=' + this.state.email, pwd).then((response) => {\r\n    //         this.showInfoSuccessToast('Contraseña modificada correctamente para el email:  ' + this.state.email);\r\n    //     })\r\n    //         .then(this.resetStates)\r\n    //         .catch(error => {\r\n    //             this.showErrorToast(error.message.toString() + '\\nCompruebe la conexión y que ha introducido correctamente los campos.');\r\n    //         });\r\n    // }\r\n    //\r\n    // handlerEmail = (event) => {\r\n    //     this.setState({email: event.target.value});\r\n    // }\r\n    // handlerName = (event) => {\r\n    //     this.setState({name: event.target.value});\r\n    // }\r\n    // handlerSurname = (event) => {\r\n    //     this.setState({surname: event.target.value});\r\n    // }\r\n    // handlerOldPwd = (event) => {\r\n    //     this.setState({oldPwd: event.target.value});\r\n    // }\r\n    // handlerNewPwd = (event) => {\r\n    //     this.setState({newPwd: event.target.value});\r\n    // }\r\n    // handlerConfirmPwd = (event) => {\r\n    //     this.setState({confirmPwd: event.target.value});\r\n    // }\r\n    //\r\n    // resetStates = () => {\r\n    //     this.getClients();\r\n    //     this.setState({email: ''});\r\n    //     this.setState({name: ''});\r\n    //     this.setState({surname: ''});\r\n    //     this.setState({email: ''});\r\n    //     this.setState({oldPwd: ''});\r\n    //     this.setState({newPwd: ''});\r\n    //     this.setState({confirmPwd: ''});\r\n    // }\r\n    //\r\n    // GPEButtonFilter = () => {\r\n    //     if (this.state.email) {\r\n    //         this.filterMail();\r\n    //     }\r\n    //     if (this.state.name) {\r\n    //         this.filterName();\r\n    //     }\r\n    //     if (this.state.surname) {\r\n    //         this.filterSurname();\r\n    //     }\r\n    // }\r\n    //\r\n    // showSuccess = () => {\r\n    //     this.GPEAlert.current.show({severity: 'success', summary: 'Hecho', life: 3000});\r\n    // }\r\n    //\r\n    // showInfoSuccess = (detailValue) => {\r\n    //     this.GPEAlert.current.show({severity: 'success', summary: 'Hecho', detail: detailValue, life: 3000});\r\n    // }\r\n    //\r\n    // showError = (error) => {\r\n    //     this.GPEAlert.current.show({severity: 'error', summary: 'Error', detail: error, sticky: true});\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Toast ref={this.GPEAlert}/>\r\n                <TabView>\r\n                    <TabPanel header='Clients'>\r\n                        <div className='flexCenter'>\r\n                            <InputText value={this.state.email} onChange={this.handlerEmail}\r\n                                       disabled={this.state.name || this.state.surname} placeholder='Email'\r\n                                       style={{width: '40%', marginLeft: '1%'}}/>\r\n\r\n                            <GPEButton getIcon='pi pi-refresh' onClick={this.resetStates} variant=\"outlined\"\r\n                                    className='p-GPEButton-warning'\r\n                            />\r\n                            <GPEButton getLabel='Filtrar' icon='pi pi-filter' onClick={this.GPEButtonFilter}\r\n                                    className='p-GPEButton-warning' style={{width: '15%', marginLeft: '1%', marginRight: '1%'}}/>\r\n                        </div>\r\n\r\n                    </TabPanel>\r\n                    <TabPanel header='Add New Client'>\r\n                        <div className='flexCenter'>\r\n                            <InputText value={this.state.email} onChange={this.handlerEmail}\r\n                                       placeholder='Email' style={{width: '40%'}}/>\r\n                            <GPEButton GetLabel='Eliminar' icon='pi pi-trash' onClick={this.deleteUsers}\r\n                                    className='p-GPEButton-secondary p-mr-2'/>\r\n                        </div>\r\n\r\n                    </TabPanel>\r\n                    <TabPanel header='Modify Client'>\r\n                        <div className='flexCenter'>\r\n                            <InputText value={this.state.email} onChange={this.handlerEmail}\r\n                                       placeholder='Email' style={{width: '30%'}}/>\r\n                            <InputText type='password' value={this.state.oldPwd} onChange={this.handlerOldPwd}\r\n                                       placeholder='Contraseña anterior' style={{width: '30%'}}/>\r\n                            <GPEButton label='Confirmar' onClick={this.changePassword}\r\n                                    className='p-GPEButton-secondary p-mr-2' style={{width: '30%'}}/>\r\n                        </div>\r\n                    </TabPanel>\r\n                </TabView>\r\n                <div>\r\n                    <DataTable value={this.state.clients}>\r\n                        <Column field='ClientId' header='ClientId'\r\n                                style={{textAlign: 'center'}}/>\r\n                        <Column field='Name' header='Name' style={{textAlign: 'center'}}/>\r\n                        <Column field='Address' header='Address'\r\n                                style={{textAlign: 'center'}}/>\r\n                        <Column field='City' header='City' style={{textAlign: 'center'}}/>\r\n                        <Column field='Province' header='Province' style={{textAlign: 'center'}}/>\r\n                        <Column field='Phone' header='Phone' style={{textAlign: 'center'}}/>\r\n                        <Column field='NIF' header='NIF' style={{textAlign: 'center'}}/>\r\n                        <Column field='ContactName' header='ContactName' style={{textAlign: 'center'}}/>\r\n                        <Column field='RegisterDate' header='RegisterDate' style={{textAlign: 'center'}}/>\r\n                        <Column field='Enabled' header='Enabled' style={{textAlign: 'center'}}/>\r\n                    </DataTable>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {createRef, Fragment} from 'react';\r\nimport '../App.css';\r\nimport {DataTable} from 'primereact/datatable';\r\nimport {Column} from 'primereact/column';\r\nimport {InputText} from 'primereact/inputtext';\r\nimport {Button} from 'primereact/button';\r\nimport {TabPanel, TabView} from 'primereact/tabview';\r\nimport {Toast} from 'primereact/toast';\r\nimport {axios, GPEApi} from '../components/GPEConst'\r\nimport {GPEInput} from '../components/GPEInput';\r\nimport {Dropdown} from 'primereact/dropdown';\r\n\r\nexport class EmployeesView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.GPEAlert = createRef();\r\n        this.state = {\r\n            employees: [],\r\n            allEmployees: [],\r\n            name: '',\r\n            type: '',\r\n            enabled: '',\r\n            types: ['Salesman', 'Deliverer'],\r\n            enabledOptions: ['true', 'false'],\r\n            visible: true,\r\n            employeeId: ''\r\n        }\r\n    }\r\n\r\n    //Take the value and save it in the state\r\n    nameHandler = (e) => {\r\n        this.setState({name: e.target.value});\r\n    };\r\n    //Take the value and save it in the state\r\n    typeHandler = (e) => {\r\n        this.setState({type: e.target.value});\r\n    };\r\n    //Take the value and save it in the state\r\n    enabledHandler = (e) => {\r\n\r\n        this.setState({enabled: e.target.value});\r\n\r\n\r\n    };\r\n\r\n    //Clear inputs value\r\n\r\n    clearInputs = () => {\r\n        this.setState({name: ''});\r\n        this.setState({type: ''});\r\n    }\r\n\r\n    //Check if inputs are empty\r\n\r\n    checkIputs = () => {\r\n        if (this.state.name == '' || this.state.type == '' || this.state.enabled == '') {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    //Check the enabled field and shou a green button if is true and red button if is false\r\n    btnActive = (rowData) => {\r\n        console.log(rowData.Enabled);\r\n        return (<>{rowData.Enabled == 'Yes' ?\r\n            <Button label='YES' onClick={() => this.changeEmployee(rowData)} className='p-button-success'/>\r\n            :\r\n            <Button label='NO' onClick={() => this.changeEmployee2(rowData)} className=' p-button-danger'/>\r\n        }\r\n        </>)\r\n    }\r\n    //Post a new employee on data base\r\n    addEmployee = () => {\r\n        if (this.checkIputs()) {\r\n            let employee = {\r\n\r\n                Name: this.state.name,\r\n                Type: this.state.type,\r\n                Enabled: 0\r\n            }\r\n            axios.post(GPEApi + 'Employees', employee).then(response => {\r\n                    this.getEmployees();\r\n                    this.clearInputs();\r\n                    this.setState({activeIndex: 0});\r\n                }\r\n            )\r\n        } else {\r\n            alert('You have to introduce all fields')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getEmployees();\r\n    }\r\n\r\n    //Get the data base employees information\r\n    getEmployees = () => {\r\n        axios.get(GPEApi + 'Employees/BackOffice').then((response) => {\r\n            response.data.forEach(item => {\r\n                if (item.Enabled === true) {\r\n                    item.Enabled = 'Yes';\r\n                } else {\r\n                    item.Enabled = 'No';\r\n                }\r\n            });\r\n            this.setState({employees: response.data});\r\n            this.setState({allEmployees: response.data});\r\n        })\r\n    }\r\n    //Take the value and save it in the state\r\n    filterHandler = (e) => {\r\n        this.setState({filter: e.target.value}, () => {\r\n            this.filter();\r\n            console.log(this.state.filter);\r\n            console.log(this.state.allEmployees);\r\n        });\r\n    };\r\n    //Update the enabled employees and turn it disabled\r\n    changeEmployee = (employee) => {\r\n        axios.put(GPEApi + 'Employees/' + employee.EmployeeId, {\r\n            'Name': employee.Name,\r\n            'Type': employee.Type,\r\n            'Enabled': false\r\n        }).then(() => this.getEmployees())\r\n    }\r\n    // update the disabled employees and turn it enabled\r\n    changeEmployee2 = (employee) => {\r\n        let emp = {\r\n            Name: this.state.name,\r\n            Type: this.state.type,\r\n            Enabled: this.state.enabled\r\n        }\r\n        axios.put(GPEApi + 'Employees/' + employee.EmployeeId, {\r\n            'Name': employee.Name,\r\n            'Type': employee.Type,\r\n            'Enabled': true\r\n        }).then(() => this.getEmployees())\r\n    }\r\n    //Update the employee with a new name and new type\r\n    updateEmployee = () => {\r\n        let emp = {\r\n\r\n            Name: this.state.name,\r\n            Type: this.state.type\r\n        }\r\n        axios.put(GPEApi + 'Employees/' + this.state.employeeId, emp).then(response => {\r\n                this.visibleHandler();\r\n                this.getEmployees();\r\n                this.clearInputs();\r\n            }\r\n        )\r\n\r\n    }\r\n    //Show and hide the modify screen\r\n    visibleHandler = () => {\r\n        this.setState({visible: !this.state.visible});\r\n    }\r\n    //tTake the information of the actual employye and save it in the state for use it later\r\n    showInputs = (rowData) => {\r\n        this.visibleHandler();\r\n        console.log(rowData)\r\n        this.setState({employeeId: rowData.EmployeeId});\r\n        this.setState({name: rowData.Name}, () => console.log(this.state.name));\r\n        this.setState({enabled: rowData.Enabled});\r\n    }\r\n\r\n    //This function takes the input value and filter de array of information using it\r\n    filter = () => {\r\n\r\n        let employeeList = [];\r\n        if (this.state.filter === '') {\r\n            this.setState({employees: this.state.allEmployees});\r\n\r\n        } else {\r\n            this.state.allEmployees.forEach(element => {\r\n                const filterText = this.state.filter.toUpperCase();\r\n                if (element.EmployeeId == this.state.filter\r\n                    || element.Name.toUpperCase().includes(this.state.filter.toUpperCase())\r\n                    || element.Type.toUpperCase().includes(this.state.filter.toUpperCase())\r\n                    || element.Enabled.toUpperCase().includes(this.state.filter.toUpperCase())) {\r\n                    employeeList.push(element);\r\n                }\r\n            });\r\n            this.setState({employees: employeeList});\r\n        }\r\n    };\r\n    //Button used for go to the modify screen\r\n    changePage = (rowData) => {\r\n        return <Button label='Modify' icon='pi pi-pencil' onClick={() => this.showInputs(rowData)}\r\n                       className='p-button-secondary p-mr-2'\r\n                       style={{backgroundColor: '#86AEC2'}}/>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Toast ref={this.GPEAlert}/>\r\n                <TabView>\r\n                    <TabPanel header='Employees Filter'>\r\n                        {this.state.visible === true ? <div>\r\n                                <div className='flexCenter'>\r\n                                    <GPEInput onChange={this.filterHandler}/>\r\n                                    <Button label='Actualizar' icon='pi pi-refresh' onClick={this.resetStates}\r\n                                            className='p-button-secondary p-mr-2'\r\n                                            style={{backgroundColor: '#86AEC2'}}/>\r\n                                </div>\r\n                                <div>\r\n                                    <DataTable value={this.state.employees}>\r\n                                        <Column style={{textAlign: 'center', width: '12%'}} field='EmployeeId'\r\n                                                header='EmployeeId'/>\r\n                                        <Column style={{textAlign: 'center', width: '9%'}} field='Name' header='Name'/>\r\n                                        <Column style={{textAlign: 'center', width: '11%'}} field='Type'\r\n                                                header='Type'/>\r\n                                        <Column body={this.btnActive} style={{textAlign: 'center', width: '10%'}}\r\n                                                field='Enabled'\r\n                                                header='Enabled'/>\r\n                                        <Column style={{textAlign: 'center', width: '11%'}} body={this.changePage}\r\n                                                field='Modify' header='Modify'></Column>\r\n                                    </DataTable>\r\n                                </div>\r\n                            </div> :\r\n                            <div>\r\n                                <InputText value={this.state.name} onChange={this.nameHandler}\r\n                                           placeholder='Name' style={{width: '220px'}}\r\n                                />\r\n                                <Dropdown value={this.state.type} options={this.state.types}\r\n                                          placeholder='Select Type' onChange={this.typeHandler}\r\n                                />\r\n                                <Button label='Modify' icon='pi pi-send' onClick={this.updateEmployee}\r\n                                        className='p-button-secondary p-mr-2'\r\n                                        style={{backgroundColor: '#77FF94', color: 'black'}}/>\r\n                            </div>}\r\n                    </TabPanel>\r\n                    <TabPanel header='New Employees'>\r\n                        <div>\r\n                            <InputText value={this.state.name} onChange={this.nameHandler}\r\n                                       placeholder='Name' style={{width: '220px'}}\r\n                            />\r\n                            <Dropdown value={this.state.type} options={this.state.types}\r\n                                      placeholder='Select Type' onChange={this.typeHandler}\r\n                            />\r\n                            <Dropdown value={this.state.enabled} options={this.state.enabledOptions}\r\n                                      placeholder='Select if is enabled' onChange={this.enabledHandler}\r\n                            />\r\n                            <Button label=' New Lot' icon='pi pi-plus-circle' onClick={this.addEmployee}\r\n                                    className='p-button-secondary p-mr-2'\r\n                                    style={{backgroundColor: '#77FF94', color: 'black'}}/>\r\n                        </div>\r\n                    </TabPanel>\r\n                </TabView>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {createRef, Fragment} from 'react';\r\nimport '../App.css';\r\nimport {TabPanel, TabView} from 'primereact/tabview';\r\nimport {Toast} from \"primereact/toast\";\r\nimport {InputText} from \"primereact/inputtext\";\r\nimport {Button} from \"primereact/button\";\r\nimport {DataTable} from \"primereact/datatable\";\r\nimport {Column} from \"primereact/column\";\r\nimport {GPEApi,axios,moment} from '../components/GPEConst'\r\n\r\nexport class OrdersView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.GPEAlert = createRef();\r\n        this.state = {\r\n            orders: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getOrders();\r\n    }\r\n\r\n    getOrders = () => {\r\n        axios.get(GPEApi + 'Orders').then((response) => {\r\n            response.data.forEach(item => {\r\n                item.Date = moment(item.Date).format('YYYY-MM-DD');\r\n                item.DeriveryDate = moment(item.Date).format('YYYY-MM-DD');\r\n                if (item.Delivered === true) {\r\n                    item.Delivered = 'Yes';\r\n                } else {\r\n                    item.Delivered = 'No';\r\n                }\r\n                if (item.Paid === true) {\r\n                    item.Paid = 'Yes';\r\n                } else {\r\n                    item.Paid = 'No';\r\n                }\r\n            });\r\n            this.setState({orders: response.data});\r\n        })\r\n    }\r\n\r\n    // showSuccess = () => {\r\n    //     this.GPEAlert.current.show({severity: 'success', summary: 'Hecho', life: 3000});\r\n    // }\r\n    //\r\n    // showInfoSuccess = (detailValue) => {\r\n    //     this.GPEAlert.current.show({severity: 'success', summary: 'Hecho', detail: detailValue, life: 3000});\r\n    // }\r\n    //\r\n    // showError = (error) => {\r\n    //     this.GPEAlert.current.show({severity: 'error', summary: 'Error', detail: error, sticky: true});\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Toast ref={this.GPEAlert}/>\r\n                <TabView>\r\n                    <TabPanel header='Orders'>\r\n                        <div className='flexCenter'>\r\n                            <InputText value={this.state.local} onChange={this.handlerLocal}\r\n                                       placeholder='Equipo local'/>\r\n                            <InputText value={this.state.visitant} onChange={this.handlerVisitant}\r\n                                       placeholder='Equipo visitante'/>\r\n                            <InputText value={this.state.date} onChange={this.handlerDate} disabled={this.state.eventId}\r\n                                       placeholder='Fecha: 2000-01-01 00:00:00' style={{width: '230px'}}/>\r\n                            <Button label='Actualizar' icon='pi pi-refresh' onClick={this.resetStates}\r\n                                    className='p-button-secondary p-mr-2'\r\n                                    style={{backgroundColor: '#86AEC2'}}/>\r\n                            <Button label='Filtrar' icon='pi pi-filter' onClick={this.filterButton}\r\n                                    className='p-button-secondary p-mr-2'/>\r\n                        </div>\r\n                        <div>\r\n                            <DataTable value={this.state.orders}>\r\n                                <Column style={{textAlign: 'center', width: '15%'}} field='OrderId'\r\n                                        header='OrderId'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='ClientId'\r\n                                        header='ClientId'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='OrderNum'\r\n                                        header='OrderNum'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='Date'\r\n                                        header='Date'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='DeriveryDate'\r\n                                        header='DeriveryDate'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='ContactName'\r\n                                        header='ContactName'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='Total'\r\n                                        header='Total'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='Delivered' header='Delivered'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='Paid' header='Paid'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='PayingMethod' header='PayingMethod'/>\r\n                                <Column style={{textAlign: 'center', width: '25%'}} field='EmployeeId' header='EmployeeId'/>\r\n                            </DataTable>\r\n                        </div>\r\n                    </TabPanel>\r\n                </TabView>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\r\nimport 'primereact/resources/themes/arya-orange/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport * as React from 'react';\r\nimport {HashRouter, NavLink, Route, Switch} from 'react-router-dom';\r\nimport {LotsView} from './screens/LotsView';\r\nimport {ArticlesView} from './screens/ArticlesView';\r\nimport {ReportsView} from './screens/ReportsView';\r\nimport {ClientsView} from './screens/ClientsView';\r\nimport {EmployeesView} from \"./screens/EmployeesView\";\r\nimport {OrdersView} from \"./screens/OrdersView\";\r\n\r\nexport default class App extends React.Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <div className='container'>\r\n                    <div className='menu'>\r\n                        <nav>\r\n                            <div>\r\n                                <NavLink to='/articles' activeClassName='selectedLink' className='navLink'>\r\n                                    Articles\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/lots' activeClassName='selectedLink' className='navLink'>\r\n                                    Lots\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/orders' activeClassName='selectedLink' className='navLink'>\r\n                                    Orders\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/clients' activeClassName='selectedLink' className='navLink'>\r\n                                    Clients\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/employees' activeClassName='selectedLink' className='navLink'>\r\n                                    Employees\r\n                                </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/reports' activeClassName='selectedLink' className='navLink'>\r\n                                    Reports\r\n                                </NavLink>\r\n                            </div>\r\n                        </nav>\r\n                    </div>\r\n                    <div className='mainWindow'>\r\n                        <Switch>\r\n                            <Route path='/articles'>\r\n                                <ArticlesView/>\r\n                            </Route>\r\n                            <Route path='/lots'>\r\n                                <LotsView/>\r\n                            </Route>\r\n                            <Route path='/orders'>\r\n                                <OrdersView/>\r\n                            </Route>\r\n                            <Route path='/clients'>\r\n                                <ClientsView/>\r\n                            </Route>\r\n                            <Route path='/employees'>\r\n                                <EmployeesView/>\r\n                            </Route>\r\n                            <Route path='/reports'>\r\n                                <ReportsView/>\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}